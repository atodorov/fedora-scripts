#!/usr/bin/env python

################################################################################
#
#   Copyright (c) 2014, Alexander Todorov <atodorov@nospam.redhat.com>
#
################################################################################

import io
import os
import sys
import time
import urllib2
import xmlrpclib
import kobo.xmlrpc
try:
    import ConfigParser as configparser
except ImportError:
    import configparser

from optparse import OptionParser

def _get_dirname_from_link(link):
    if link.find('href=') > -1:
        dirname = link.strip().split('=')[1].split('>')[0].strip('"').strip('/')
        if not dirname.startswith("?"):
            return dirname

    return ""

def get_snapshot_dirs(url):
    result = []
    data = urllib2.urlopen(url).read()
    for line in data.split('\n'):
        dir = _get_dirname_from_link(line)
        if dir and ((dir.find('rawhide-') > -1) or (dir.find('branched-') > -1)):
            result.append(dir)

    return result


def get_versions(url):
    result = []
    data = urllib2.urlopen(url).read()
    for line in data.split('\n'):
        version = _get_dirname_from_link(line)
        if version and (version != "logs"):
            result.append(version)

    return result

def get_arches(url):
    result = []
    data = urllib2.urlopen(url).read()
    for line in data.split('\n'):
        arch = _get_dirname_from_link(line)
        if arch and (arch != "source"):
            result.append(arch)

    return result

def get_treeinfo(url):
    try:
        data = urllib2.urlopen("%s/os/.treeinfo" % url).read()
    except urllib2.HTTPError: # network error or 404
        return None

    treeinfo = configparser.RawConfigParser()
    treeinfo.readfp(io.BytesIO(data))
    return treeinfo

def make_timestamp(s_timestamp):
    ts = time.gmtime(float(s_timestamp))
    return "%d%d%02d" % (ts.tm_year, ts.tm_mon, ts.tm_mday)

def make_variant(variant):
    if variant:
        return variant

    return "Fedora"

if __name__ == "__main__":
    config={}

    parser = OptionParser(description="Sync Fedora snapshots between Koji and Beaker")
    parser.add_option("-b", "--beaker", dest="beaker", action="store", default="http://beaker01.qa.fedoraproject.org:8000/",
                      help="URL of Beaker proxy, default http://beaker01.qa.fedoraproject.org:8000/")
    parser.add_option("-m", "--mash", dest="mash", action="store", default="http://koji.fedoraproject.org/mash/",
                      help="URL of Mash, default http://koji.fedoraproject.org/mash/")
    (opt, args) = parser.parse_args()

    if not opt.beaker:
        print "ERROR: Beaker URL is not specified."
        sys.exit(1)
    opt.beaker = opt.beaker.strip('/')

    if not opt.mash:
        print "ERROR: Mash URL is not specified."
        sys.exit(1)
    # replace koji FQDN with internal IP address b/c (maybe) it doesn't resolve properly
    # inside Beaker's environment
    opt.mash = opt.mash.replace('koji.fedoraproject.org', '10.5.125.63').strip('/')

    # build a transport which supports cookies.
    # cookies are used for authentication
    if opt.beaker.startswith("https://"):
        TransportClass = kobo.xmlrpc.retry_request_decorator(kobo.xmlrpc.SafeCookieTransport)
    else:
        TransportClass = kobo.xmlrpc.retry_request_decorator(kobo.xmlrpc.CookieTransport)

    # Build XML-RPC object (this is Beaker Proxy, not Beaker HTTP server)
    bkr = xmlrpclib.ServerProxy(opt.beaker, transport=TransportClass())

    # get a list of all Beaker distros
    bkr_distros = bkr.get_distro_trees()
    distros = {}
    for d in bkr_distros:
        name = d['distro_name']
        arch = d['arch']
        if distros.has_key(name):
            distros[name].append(arch)
        else:
            distros[name] = [arch]
    bkr_distros = distros

    # get a list of all Fedora snapshots in mash
    mash_distros = []
    for dir in get_snapshot_dirs(opt.mash):
        for version in get_versions("%s/%s" % (opt.mash, dir)):
            for arch in get_arches("%s/%s/%s" % (opt.mash, dir, version)):
                distro = {}
                treeinfo = get_treeinfo("%s/%s/%s/%s" % (opt.mash, dir, version, arch))

                if not treeinfo:
                    print "WARN: No .treeinfo found under %s/%s/%s ..." % (dir, version, arch)
                    continue

                timestamp = make_timestamp(treeinfo.get('general', 'timestamp'))
                distro['tree_build_time'] = treeinfo.get('general', 'timestamp')

                family = treeinfo.get('general', 'family').replace(' ', '')
                version = treeinfo.get('general', 'version')

                distro['osmajor'] = "%s%s" % (family, version)
                distro['osminor'] = 0

                distro['name'] = "%s-%s-%s" % (family, version, timestamp)
                distro['arch'] = treeinfo.get('general', 'arch')
                distro['variant'] = make_variant(treeinfo.get('general', 'variant'))

                # NB: trailing / after os/ is important.
                # without it Beaker dies when trying to fetch install images
                repo = "%s/%s/%s/%s/os/" % (opt.mash, dir, version, arch)
                distro['urls'] = [repo]
                distro['repos'] = [
                    {
                        'repoid' : 'Fedora',
                        'type'   : 'variant',
                        'path'   : '.',
                    },
                    {
                        'repoid' : 'Fedora-debuginfo',
                        'type'   : 'debuginfo',
                        'path'   : repo.replace('/os', '/debug'),
                    },
                ]

                distro['images'] = []
                for (img_type, img_path) in treeinfo.items('images-%s' % distro['arch']):
                    if img_type in ['kernel', 'initrd', 'uimage', 'uinitrd']:
                        distro['images'].append({
                                                    'type' : img_type,
                                                    'path' : img_path,
                                                })

                mash_distros.append(distro)
                print "INFO: Found %s-%s" % (distro['name'], distro['arch'])


    if not mash_distros:
        print "ERROR: No distros found on mash!"
        sys.exit(2)

    # loop over all distros to search for new ones
    # if distro is not known to Beaker => add it
    for distro in mash_distros:
        name = distro['name']
        arch = distro['arch']
        if bkr_distros.has_key(name) and (arch in bkr_distros[name]):
            print "INFO: %s-%s is already in Beaker!" % (name, arch)
            continue

        distro_tree_id = bkr.add_distro_tree(distro)
        print "INFO: Added %s-%s as %d!" % (name, arch, distro_tree_id)
